name: Deploy to Akash Node

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: "q18621281648/my-app"  # 替换为实际镜像名称
      AKASH_KEY_NAME: "botkey"
      AKASH_NODE: "https://rpc.akashnet.net:443"  # 使用 Akash 主网节点
      AKASH_CHAIN_ID: "akashnet-2"
      DEPLOYMENT_NAME: "my-jarvis-bot"
      KUBERNETES_NAMESPACE: "akash-services"

    steps:
      # 1) 检出代码
      - name: Check out code
        uses: actions/checkout@v3

      # 2) 登录 Docker 仓库
      - name: Log in to Docker Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 3) 构建 Docker 镜像
      - name: Build Docker Image
        run: |
          docker build -t ${DOCKER_IMAGE_NAME}:latest .

      # 4) 推送 Docker 镜像
      - name: Push Docker Image
        run: |
          docker push ${DOCKER_IMAGE_NAME}:latest

      # 5) 安装 Kubernetes CLI 和 Helm
      - name: Install Kubernetes CLI and Helm
        run: |
          sudo apt-get update
          sudo apt-get install -y kubectl
          wget https://get.helm.sh/helm-v3.11.0-linux-amd64.tar.gz
          tar -zxvf helm-v3.11.0-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          helm version
          kubectl version --client

      # 6) 配置 Kubernetes 命名空间和标签
      - name: Configure Kubernetes Namespace and Labels
        run: |
          kubectl create ns ${KUBERNETES_NAMESPACE} || echo "Namespace already exists"
          kubectl label ns ${KUBERNETES_NAMESPACE} akash.network/name=akash-services akash.network=true --overwrite

      # 7) 添加 Akash Helm 仓库并更新
      - name: Add and Update Akash Helm Repo
        run: |
          helm repo remove akash || true
          helm repo add akash https://akash-network.github.io/helm-charts
          helm repo update

      # 8) 卸载现有的 Akash 节点实例（如有）
      - name: Uninstall Previous Akash Node
        run: |
          helm -n ${KUBERNETES_NAMESPACE} uninstall akash-node || echo "No previous Akash node found"

      # 9) 使用 Helm 部署 Akash 节点
      - name: Install Akash Node via Helm
        run: |
          helm install akash-node akash/akash-node -n ${KUBERNETES_NAMESPACE}
          echo "Akash Node installed successfully!"

      # 10) 验证 Akash 节点状态
      - name: Verify Akash Node Pod Status
        run: |
          kubectl get pods -n ${KUBERNETES_NAMESPACE}
          POD_NAME=$(kubectl get pods -n ${KUBERNETES_NAMESPACE} -l app.kubernetes.io/name=akash-node -o jsonpath="{.items[0].metadata.name}")
          echo "Pod Name: $POD_NAME"
          kubectl logs $POD_NAME -n ${KUBERNETES_NAMESPACE} | grep -iv peer | tail

      # 11) 验证节点同步状态
      - name: Check Akash Node Sync Status
        run: |
          POD_NAME=$(kubectl get pods -n ${KUBERNETES_NAMESPACE} -l app.kubernetes.io/name=akash-node -o jsonpath="{.items[0].metadata.name}")
          kubectl exec --stdin --tty -n ${KUBERNETES_NAMESPACE} $POD_NAME -- akash status > status.json
          cat status.json
          SYNC_STATUS=$(jq -r '.SyncInfo.catching_up' status.json)
          if [ "$SYNC_STATUS" == "false" ]; then
            echo "Akash Node is synced with the blockchain."
          else
            echo "Akash Node is still syncing with the blockchain."
          fi

      # 12) 生成 SDL 文件
      - name: Generate SDL File
        run: |
          cat <<EOF > deployment.yaml
          version: "2.0"

          services:
            web:
              image: "${DOCKER_IMAGE_NAME}:latest"
              expose:
                - port: 80
                  as: 80
                  to:
                    - global: true

          profiles:
            compute:
              basic:
                resources:
                  cpu:
                    units: 0.5
                  memory:
                    size: 512Mi
                  storage:
                    size: 1Gi
            placement:
              basic:
                attributes: {}
                signedBy:
                  anyOf: []
                pricing:
                  web:
                    denom: uakt
                    amount: 1000

          deployment:
            web:
              profile: basic
              count: 1
          EOF
          cat deployment.yaml

      # 13) 创建部署
      - name: Create Deployment
        run: |
          echo "Creating deployment on Akash..."
          (echo "${{ secrets.AKASH_KEY_PASSPHRASE }}") | akash tx deployment create deployment.yaml \
          --from "${AKASH_KEY_NAME}" \
          --deposit "5000000uakt" \
          --yes \
          --keyring-backend file \
          --sign-mode direct
          echo "Deployment created!"

      # 14) 验证部署状态
      - name: Verify Deployment
        run: |
          ADDR=$(echo "${{ secrets.AKASH_ADDRESS }}")
          DSEQ=$(akash query deployment list --owner "$ADDR" --state active -o json | jq -r '.deployments[-1].deployment.deployment_id.dseq')
          echo "Deployment Sequence: $DSEQ"
          echo "Deployment verified!"
