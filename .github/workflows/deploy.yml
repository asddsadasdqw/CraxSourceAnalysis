name: Deploy to Akash Testnet

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      #################################################################
      # 1) 检出代码
      #################################################################
      - name: Check out code
        uses: actions/checkout@v3

      #################################################################
      # 2) （可选）列出当前目录文件
      #################################################################
      - name: Debug File Path
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing files in the current directory:"
          ls -R

      #################################################################
      # 3) 安装 Akash CLI (示例用 v1.0.0-rc10)
      #################################################################
      - name: Install Akash CLI
        run: |
          curl -sSL https://github.com/ovrclk/akash/releases/download/v1.0.0-rc10/akash_1.0.0-rc10_linux_amd64.zip -o akash.zip
          if [ ! -s akash.zip ]; then
              echo "Download failed or file is empty."
              exit 1
          fi
          mkdir -p akash-cli
          unzip akash.zip -d akash-cli
          sudo mv akash-cli/akash /usr/local/bin/akash
          sudo chmod +x /usr/local/bin/akash
          akash version

      #################################################################
      # 4) 恢复钱包 (file keyring) 并自动输入助记词&密码
      #
      #   需要你在 GitHub Secrets 配置：
      #   - AKASH_MNEMONIC
      #   - AKASH_KEY_NAME
      #   - KEYRING_PASSPHRASE
      #################################################################
      - name: Recover Akash Wallet
        env:
          AKASH_MNEMONIC: ${{ secrets.AKASH_MNEMONIC }}
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
        run: |
          sudo apt-get update && sudo apt-get install -y expect

          if [ -z "$AKASH_MNEMONIC" ] || [ -z "$AKASH_KEY_NAME" ] || [ -z "$KEYRING_PASSPHRASE" ]; then
            echo "Error: Missing environment variables (MNEMONIC, KEY_NAME, or PASSPHRASE)."
            exit 1
          fi

          echo "
          spawn akash keys add \"$AKASH_KEY_NAME\" --recover --keyring-backend file
          expect \"Enter your bip39 mnemonic:\"
          send \"$AKASH_MNEMONIC\\r\"
          expect \"Enter keyring passphrase:\"
          send \"$KEYRING_PASSPHRASE\\r\"
          expect \"Re-enter keyring passphrase:\"
          send \"$KEYRING_PASSPHRASE\\r\"
          expect eof
          " > recovery-script.exp
          expect recovery-script.exp
          rm -f recovery-script.exp

      #################################################################
      # 5) 创建证书 (若已存在同名证书，则忽略错误)
      #
      #   在 Akash 网络上发起部署需要证书。若账户无余额也会失败。
      #################################################################
      - name: Create Akash Certificate
        env:
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
          AKASH_CHAIN_ID: sandbox-01
          AKASH_NODE_URL: http://rpc.sandbox-01.aksh.pw:26657
        run: |
          echo "$KEYRING_PASSPHRASE" | akash tx cert create client \
            --chain-id "$AKASH_CHAIN_ID" \
            --node "$AKASH_NODE_URL" \
            --from "$AKASH_KEY_NAME" \
            --keyring-backend file \
            --sign-mode direct \
            -y || true

      #################################################################
      # 6) （可选）列出当前 Keys（不一定能显示地址，
      #     因为 file backend 也会 prompt passphrase）
      #
      #     但还是可以看看 key name
      #################################################################
      - name: Debug Key Names
        run: |
          echo "Listing key names in Akash CLI:"
          akash keys list --keyring-backend file

      #################################################################
      # 7) 在部署之前，先检查余额
      #
      #    因为 file keyring模式下 "akash keys show <NAME>" 也会
      #    交互式要密码，所以这里用 Expect 获取地址并保存到 $ADDR。
      #################################################################
      - name: Check Balance
        env:
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
          AKASH_CHAIN_ID: sandbox-01
          AKASH_NODE_URL: http://rpc.sandbox-01.aksh.pw:26657
        run: |
          sudo apt-get update && sudo apt-get install -y expect

          # 1) 用 expect 获取地址
          cat <<'EOF' > get_address.exp
#!/usr/bin/expect -f
# 不显示 expect 命令的提示
log_user 0

# 启动 "akash keys show <KEYNAME> -a --keyring-backend file"
spawn akash keys show "$env(AKASH_KEY_NAME)" -a --keyring-backend file

# 等待提示输入 passphrase
expect "Enter keyring passphrase:"
# 输入 passphrase
send "$env(KEYRING_PASSPHRASE)\r"

# 期待下行里会打印地址
# 这里用正则捕获 "akash1[0-9a-z]+"
expect {
  -re {^(akash1[a-z0-9]+)$} {
     set address $expect_out(1,string)
     # 把地址输出到 stdout
     send_user "$address\n"
  }
}
expect eof
EOF

          chmod +x get_address.exp
          # 执行并把捕获到的地址保存到 ADDR
          ADDR=$(./get_address.exp)
          echo "Your wallet address is: $ADDR"

          # 2) 查询余额
          echo "Querying bank balances on $AKASH_CHAIN_ID..."
          akash query bank balances "$ADDR" --node "$AKASH_NODE_URL"

      #################################################################
      # 8) 部署到 Testnet（发送 tx deployment create）
      #
      #   需要在仓库根目录放一个 deploy.yml (SDL)
      #################################################################
      - name: Deploy to Testnet
        env:
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
          AKASH_CHAIN_ID: sandbox-01
          AKASH_NODE_URL: http://rpc.sandbox-01.aksh.pw:26657
        run: |
          # 1) 检查 deploy.yml 是否存在
          if [ ! -f deploy.yml ]; then
              echo "Error: deploy.yml not found!"
              exit 1
          fi

          # 2) 测试 RPC
          echo "Testing connectivity to $AKASH_NODE_URL..."
          curl --fail --max-time 10 "$AKASH_NODE_URL/status"

          # 3) 发起部署交易
          echo "Sending deployment transaction..."
          echo "$KEYRING_PASSPHRASE" | akash tx deployment create deploy.yml \
            --from "$AKASH_KEY_NAME" \
            --chain-id "$AKASH_CHAIN_ID" \
            --node "$AKASH_NODE_URL" \
            --gas auto --gas-adjustment 1.25 \
            -y --keyring-backend file --sign-mode direct

          echo "Deployment transaction sent."
