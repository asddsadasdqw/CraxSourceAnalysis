name: Deploy to Akash

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y expect unzip

      - name: Install Akash CLI
        run: |
          set -eux
          DOWNLOAD_URL="https://github.com/ovrclk/akash/releases/download/v1.0.0-rc10/akash_1.0.0-rc10_linux_amd64.zip"
          echo "Downloading from $DOWNLOAD_URL"
          curl -sSL "$DOWNLOAD_URL" -o akash.zip
          if [ ! -s akash.zip ]; then
            echo "Download failed or file is empty."
            exit 1
          fi
          unzip akash.zip -d akash-cli
          sudo mv akash-cli/akash /usr/local/bin/akash
          sudo chmod +x /usr/local/bin/akash
          akash version

      - name: Create a new key
        env:
          KEY_NAME: newkey
          KEY_PASSPHRASE: "qq112233"
        run: |
          set -eux
          # 注册新钱包: 输入两遍口令
          (echo "$KEY_PASSPHRASE"; echo "$KEY_PASSPHRASE") | akash keys add "$KEY_NAME" --keyring-backend file

          # 查看地址(输入一次口令)
          ADDR=$( (echo "$KEY_PASSPHRASE") | akash keys show "$KEY_NAME" -a --keyring-backend file )
          echo "New wallet created: $KEY_NAME, address: $ADDR"

      - name: Check out repo (Git关联)
        uses: actions/checkout@v3

      - name: Query balance (demo)
        env:
          KEY_NAME: newkey
          KEY_PASSPHRASE: "qq112233"
          AKASH_CHAIN_ID: sandbox-01
          AKASH_NODE_URL: http://rpc.sandbox-01.aksh.pw:26657
        run: |
          set -eux
          ADDR=$( (echo "$KEY_PASSPHRASE") | akash keys show "$KEY_NAME" -a --keyring-backend file )
          echo "Querying balance for $ADDR on $AKASH_CHAIN_ID..."
          akash query bank balances "$ADDR" --node "$AKASH_NODE_URL"

      - name: Deploy to Akash (demo, needs tokens!)
        env:
          KEY_NAME: newkey
          KEY_PASSPHRASE: "qq112233"
          AKASH_CHAIN_ID: sandbox-01
          AKASH_NODE_URL: http://rpc.sandbox-01.aksh.pw:26657
        run: |
          set -eux
          # 如果你有 deployment.yaml 放在仓库根目录，这里直接用
          # 否则改成自己的路径
          SDL_FILE="deployment.yaml"

          if [ ! -f "$SDL_FILE" ]; then
            echo "No deployment.yaml found in repo root! Please add or update path."
            exit 1
          fi

          ADDR=$( (echo "$KEY_PASSPHRASE") | akash keys show "$KEY_NAME" -a --keyring-backend file )
          echo "Attempting to deploy $SDL_FILE from address: $ADDR"
          
          # 这里做一个“简单部署”示例
          # akash deploy create --from ...
          #   但 v1.0.0-rc10 可能使用 "akash tx deployment create" 的方式
          #   具体命令可根据 CLI 文档做微调
          
          (echo "$KEY_PASSPHRASE") | akash tx deployment create "$SDL_FILE" \
            --from "$KEY_NAME" \
            --keyring-backend file \
            --node "$AKASH_NODE_URL" \
            --chain-id "$AKASH_CHAIN_ID" \
            --fees 5000uakt -y
          
          echo "Deployment transaction submitted."
          echo "Note: If you don't have enough test tokens, this step may fail."

      - name: Export key for Jarvis
        env:
          KEY_NAME: newkey
          KEY_PASSPHRASE: "qq112233"
        run: |
          set -eux
          # 用 Expect 脚本来自动输入口令
          cat <<'EOF' > export_key.exp
#!/usr/bin/expect -f
set timeout 20
log_user 1
spawn akash keys export "$::env(KEY_NAME)" --keyring-backend file
expect {
  -re {Enter keyring passphrase.*} {
    send "$::env(KEY_PASSPHRASE)\r"
    exp_continue
  }
  eof {}
  timeout {
    puts "Error: export command timed out."
    exit 1
  }
}
expect eof
EOF
          chmod +x export_key.exp
          ./export_key.exp > key.json
          base64 key.json > key.json.b64
          echo "key.json.b64 created. Provide this plus password 'qq112233' to import in another environment."
