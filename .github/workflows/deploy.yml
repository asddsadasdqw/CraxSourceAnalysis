name: Deploy to Akash

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: "q18621281648/my-app"  # 替换为实际镜像名称
      AKASH_KEY_NAME: "botkey"
      AKASH_NODE: "https://raw.raw.network:26657"
      AKASH_CHAIN_ID: "akashnet-2"
      DEPLOYMENT_NAME: "my-jarvis-bot"

    steps:
      # 1) 检出代码
      - name: Check out code
        uses: actions/checkout@v3

      # 2) 登录 Docker 仓库
      - name: Log in to Docker Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 3) 构建 Docker 镜像
      - name: Build Docker Image
        run: |
          docker build -t ${DOCKER_IMAGE_NAME}:latest .

      # 4) 推送 Docker 镜像
      - name: Push Docker Image
        run: |
          docker push ${DOCKER_IMAGE_NAME}:latest

      # 5) 安装 Akash CLI
      - name: Install Akash CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y expect unzip jq
          DOWNLOAD_URL="https://github.com/ovrclk/akash/releases/download/v1.0.0-rc10/akash_1.0.0-rc10_linux_amd64.zip"
          curl -sSL "$DOWNLOAD_URL" -o akash.zip
          unzip akash.zip -d akash-cli
          sudo mv akash-cli/akash /usr/local/bin/akash
          sudo chmod +x /usr/local/bin/akash
          echo "Akash CLI installed successfully:"
          akash version

      # 6) 配置 Akash CLI
      - name: Configure Akash CLI
        run: |
          mkdir -p ~/.akash
          cat <<EOF > ~/.akash/config.toml
          node = "${AKASH_NODE}"
          chain-id = "${AKASH_CHAIN_ID}"
          broadcast-mode = "block"
          keyring-backend = "file"
          EOF
          echo "Akash config generated."

      # 7) 创建或导入 Akash 钱包
      - name: Create or Import Akash Wallet
        run: |
          echo "Creating a new Akash wallet: ${AKASH_KEY_NAME}"
          (echo "${{ secrets.AKASH_KEY_PASSPHRASE }}"; echo "${{ secrets.AKASH_KEY_PASSPHRASE }}") | akash keys add "${AKASH_KEY_NAME}" --keyring-backend file
          ADDR=$( (echo "${{ secrets.AKASH_KEY_PASSPHRASE }}") | akash keys show "${AKASH_KEY_NAME}" -a --keyring-backend file )
          echo "Wallet Address: $ADDR"
          echo "::set-output name=AKASH_ADDRESS::$ADDR"

      # 8) 生成 SDL 文件
      - name: Generate SDL File
        id: generatesdl
        run: |
          cat <<EOF > deployment.yaml
          version: "2.0"

          services:
            web:
              image: "${DOCKER_IMAGE_NAME}:latest"
              expose:
                - port: 80
                  as: 80
                  to:
                    - global: true

          profiles:
            compute:
              basic:
                resources:
                  cpu:
                    units: 0.5
                  memory:
                    size: 512Mi
                  storage:
                    size: 1Gi
            placement:
              basic:
                attributes: {}
                signedBy:
                  anyOf:
                    - "akash1xxxxxx..."  # 可留空表示不限制
                pricing:
                  web:
                    denom: uakt
                    amount: 1000

          deployment:
            web:
              profile: basic
              count: 1
          EOF
          cat deployment.yaml

      # 9) 创建部署
      - name: Create Deployment
        id: createdeployment
        run: |
          echo "Creating deployment on Akash..."
          (echo "${{ secrets.AKASH_KEY_PASSPHRASE }}") | akash tx deployment create deployment.yaml --from "${AKASH_KEY_NAME}" --deposit "5000000uakt" --yes --keyring-backend file
          echo "Deployment created!"

      # 10) 获取 Deployment Sequence
      - name: Get Deployment Sequence
        id: getdseq
        run: |
          ADDR=$( (echo "${{ secrets.AKASH_KEY_PASSPHRASE }}") | akash keys show "${AKASH_KEY_NAME}" -a --keyring-backend file )
          DSEQ_JSON=$(akash query deployment list --owner "$ADDR" --state active -o json)
          DSEQ=$(echo "$DSEQ_JSON" | jq '.deployments[-1].deployment.deployment_id.dseq')
          echo "Found dseq: $DSEQ"
          echo "dseq=$DSEQ" >> $GITHUB_OUTPUT

      # 11) 等待 Bid 并创建 Lease
      - name: Wait for Bid and Create Lease
        id: waitforbid
        run: |
          DSEQ=${{ steps.getdseq.outputs.dseq }}
          echo "Waiting for a provider to bid on dseq=$DSEQ..."
          sleep 30  # 简单等待，可改为循环检测
          PROVIDER=$(akash query market bid list --owner "${{ steps.createdeployment.outputs.AKASH_ADDRESS }}" --dseq $DSEQ -o json | jq -r '.bids[0].bid.bid_id.provider')
          echo "Selected provider: $PROVIDER"
          (echo "${{ secrets.AKASH_KEY_PASSPHRASE }}") | akash tx market lease create --owner "${{ steps.createdeployment.outputs.AKASH_ADDRESS }}" --provider "$PROVIDER" --dseq $DSEQ --gseq 1 --oseq 1 --yes --keyring-backend file
          echo "Lease created!"
          echo "provider=$PROVIDER" >> $GITHUB_OUTPUT

      # 12) 发送 Manifest
      - name: Send Manifest
        run: |
          DSEQ=${{ steps.getdseq.outputs.dseq }}
          PROVIDER=${{ steps.waitforbid.outputs.provider }}
          (echo "${{ secrets.AKASH_KEY_PASSPHRASE }}") | akash provider send-manifest deployment.yaml --provider "$PROVIDER" --dseq $DSEQ --keyring-backend file
          echo "Manifest sent!"

      # 13) 获取服务 URI
      - name: Get Service URI
        run: |
          DSEQ=${{ steps.getdseq.outputs.dseq }}
          PROVIDER=${{ steps.waitforbid.outputs.provider }}
          echo "Waiting for service to start..."
          sleep 30
          SERVICE_INFO=$(akash provider lease-status --provider "$PROVIDER" --dseq $DSEQ --gseq 1 --oseq 1 --service web)
          URI=$(echo "$SERVICE_INFO" | jq -r '.uris[0]')
          echo "Service URI: http://$URI"
