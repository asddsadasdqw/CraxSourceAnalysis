name: Deploy to Akash Testnet

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      #################################################################
      # 1) 检出代码
      #################################################################
      - name: Check out code
        uses: actions/checkout@v3

      #################################################################
      # 2) （可选）列出当前目录文件
      #################################################################
      - name: Debug File Path
        run: |
          echo "Current working directory: $(pwd)"
          echo "Listing files in the current directory:"
          ls -R

      #################################################################
      # 3) 安装 Akash CLI
      #
      #   这里下载 v1.0.0-rc10 (Linux AMD64)。如果有更新版本，
      #   可以修改下面下载链接
      #################################################################
      - name: Install Akash CLI
        run: |
          curl -sSL https://github.com/ovrclk/akash/releases/download/v1.0.0-rc10/akash_1.0.0-rc10_linux_amd64.zip -o akash.zip
          if [ ! -s akash.zip ]; then
              echo "Download failed or file is empty."
              exit 1
          fi
          mkdir -p akash-cli
          unzip akash.zip -d akash-cli
          sudo mv akash-cli/akash /usr/local/bin/akash
          sudo chmod +x /usr/local/bin/akash
          akash version

      #################################################################
      # 4) 恢复 Akash 钱包 (keys)
      #
      #   需要在仓库 “Settings > Secrets and variables > Actions” 中
      #   设置下列 Secrets:
      #     - AKASH_MNEMONIC: 助记词
      #     - AKASH_KEY_NAME: 本地 keyring 的名字 (如: mykey)
      #     - KEYRING_PASSPHRASE: 本地 keyring 密码
      #################################################################
      - name: Recover Akash Wallet
        env:
          AKASH_MNEMONIC: ${{ secrets.AKASH_MNEMONIC }}
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
        run: |
          sudo apt-get update && sudo apt-get install -y expect
          
          if [ -z "$AKASH_MNEMONIC" ] || [ -z "$AKASH_KEY_NAME" ] || [ -z "$KEYRING_PASSPHRASE" ]; then
            echo "Error: Missing environment variables (MNEMONIC, KEY_NAME, or PASSPHRASE)."
            exit 1
          fi

          echo "
          spawn akash keys add \"$AKASH_KEY_NAME\" --recover --keyring-backend file
          expect \"Enter your bip39 mnemonic:\"
          send \"$AKASH_MNEMONIC\\r\"
          expect \"Enter keyring passphrase:\"
          send \"$KEYRING_PASSPHRASE\\r\"
          expect \"Re-enter keyring passphrase:\"
          send \"$KEYRING_PASSPHRASE\\r\"
          expect eof
          " > recovery-script.exp
          expect recovery-script.exp
          rm -f recovery-script.exp

      #################################################################
      # 5) 创建证书 (若已存在同名证书，则忽略错误)
      #
      #   在 Akash 网络上发起部署需要证书。若账户无余额也会失败。
      #################################################################
      - name: Create Akash Certificate
        env:
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
          AKASH_CHAIN_ID: sandbox-01
          AKASH_NODE_URL: http://rpc.sandbox-01.aksh.pw:26657
        run: |
          echo "$KEYRING_PASSPHRASE" | akash tx cert create client \
            --chain-id "$AKASH_CHAIN_ID" \
            --node "$AKASH_NODE_URL" \
            --from "$AKASH_KEY_NAME" \
            --keyring-backend file \
            --sign-mode direct \
            -y || true

      #################################################################
      # 6) （可选）调试：列出当前 Keys，便于查看地址
      #
      #    你可以在日志里找到 "address" 行，然后把它拿去
      #    Testnet Faucet: https://akash-network.test-faucet.link/
      #    领取测试代币
      #################################################################
      - name: Debug Keys
        run: |
          echo "Listing all keys in Akash CLI:"
          akash keys list

      #################################################################
      # 7) （新增）在部署之前，先检查余额
      #
      #    如果这里显示 "balances: []" 或 "account not found"，
      #    表示还没给这个地址领水龙头代币/地址未初始化。
      #
      #    确保进入 Testnet Faucet -> 填写这里调试输出的地址
      #    领到 >= 0.5 AKT 测试币
      #################################################################
      - name: Check Balance
        env:
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
          AKASH_CHAIN_ID: sandbox-01
          AKASH_NODE_URL: http://rpc.sandbox-01.aksh.pw:26657
        run: |
          echo "Checking account balance on $AKASH_CHAIN_ID..."
          ADDR=$(akash keys show "$AKASH_KEY_NAME" -a --keyring-backend file)
          echo "Your wallet address is: $ADDR"
          echo "Querying bank balances..."
          akash query bank balances "$ADDR" --node "$AKASH_NODE_URL"

      #################################################################
      # 8) 部署到 Testnet
      #
      #    需要在仓库根目录有 deploy.yml 文件 (SDL)
      #################################################################
      - name: Deploy to Testnet
        env:
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
          AKASH_CHAIN_ID: sandbox-01
          AKASH_NODE_URL: http://rpc.sandbox-01.aksh.pw:26657
        run: |
          # 1) 检查环境
          if [ -z "$AKASH_KEY_NAME" ] || [ -z "$AKASH_CHAIN_ID" ] || [ -z "$AKASH_NODE_URL" ]; then
            echo "Error: Missing env variables for deployment"
            exit 1
          fi
          
          if [ ! -f deploy.yml ]; then
              echo "Error: deploy.yml not found!"
              exit 1
          fi

          # 2) 先测试一下 RPC
          echo "Testing connectivity to $AKASH_NODE_URL..."
          curl --fail --max-time 10 "$AKASH_NODE_URL/status"

          # 3) 发起部署交易
          echo "Sending deployment transaction..."
          echo "$KEYRING_PASSPHRASE" | akash tx deployment create deploy.yml \
            --from "$AKASH_KEY_NAME" \
            --chain-id "$AKASH_CHAIN_ID" \
            --node "$AKASH_NODE_URL" \
            --gas auto --gas-adjustment 1.25 \
            -y --keyring-backend file --sign-mode direct

          echo "Deployment transaction sent."
