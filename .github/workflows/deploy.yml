name: Deploy to Akash

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: "q18621281648/my-app"
      AKASH_KEY_NAME: "botkey"
      AKASH_NODE: "https://rpc.akashnet.net:443"  # 替换为有效的 Akash 主网节点
      AKASH_CHAIN_ID: "akashnet-2"
      DEPLOYMENT_NAME: "my-jarvis-bot"

    steps:
      # 1) 检出代码
      - name: Check out code
        uses: actions/checkout@v3

      # 2) 测试 Akash 节点连通性
      - name: Test Akash Node Connectivity
        run: |
          echo "Testing connectivity to Akash node..."
          curl -v $AKASH_NODE

      # 3) 登录 Docker 仓库
      - name: Log in to Docker Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 4) 构建 Docker 镜像
      - name: Build Docker Image
        run: |
          docker build -t ${DOCKER_IMAGE_NAME}:latest .

      # 5) 推送 Docker 镜像
      - name: Push Docker Image
        run: |
          docker push ${DOCKER_IMAGE_NAME}:latest

      # 6) 安装 Akash CLI
      - name: Install Akash CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y expect unzip jq
          DOWNLOAD_URL="https://github.com/ovrclk/akash/releases/download/v1.0.0-rc10/akash_1.0.0-rc10_linux_amd64.zip"
          curl -sSL "$DOWNLOAD_URL" -o akash.zip
          unzip akash.zip -d akash-cli
          sudo mv akash-cli/akash /usr/local/bin/akash
          sudo chmod +x /usr/local/bin/akash
          echo "Akash CLI installed successfully:"
          akash version

      # 7) 配置 Akash CLI
      - name: Configure Akash CLI
        run: |
          mkdir -p ~/.akash
          echo "node = '${AKASH_NODE}'" > ~/.akash/config.toml
          echo "chain-id = '${AKASH_CHAIN_ID}'" >> ~/.akash/config.toml
          echo "broadcast-mode = 'block'" >> ~/.akash/config.toml
          echo "keyring-backend = 'file'" >> ~/.akash/config.toml
          echo "Akash config generated."

      # 8) 创建或导入 Akash 钱包
      - name: Create or Import Akash Wallet
        run: |
          echo "Creating a new Akash wallet: ${AKASH_KEY_NAME}"
          (echo "${{ secrets.AKASH_KEY_PASSPHRASE }}"; echo "${{ secrets.AKASH_KEY_PASSPHRASE }}") | akash keys add "${AKASH_KEY_NAME}" --keyring-backend file
          ADDR=$( (echo "${{ secrets.AKASH_KEY_PASSPHRASE }}") | akash keys show "${AKASH_KEY_NAME}" -a --keyring-backend file )
          echo "Wallet Address: $ADDR"
          echo "AKASH_ADDRESS=$ADDR" >> $GITHUB_ENV

      # 9) 生成 SDL 文件
      - name: Generate SDL File
        id: generatesdl
        run: |
          cat <<EOF > deployment.yaml
          version: "2.0"

          services:
            web:
              image: "${DOCKER_IMAGE_NAME}:latest"
              expose:
                - port: 80
                  as: 80
                  to:
                    - global: true

          profiles:
            compute:
              basic:
                resources:
                  cpu:
                    units: 0.5
                  memory:
                    size: 512Mi
                  storage:
                    size: 1Gi
            placement:
              basic:
                attributes: {}
                signedBy:
                  anyOf: []
                pricing:
                  web:
                    denom: uakt
                    amount: 1000

          deployment:
            web:
              profile: basic
              count: 1
          EOF
          cat deployment.yaml

      # 10) 创建部署
      - name: Create Deployment
        id: createdeployment
        run: |
          echo "Creating deployment on Akash..."
          (echo "${{ secrets.AKASH_KEY_PASSPHRASE }}") | akash tx deployment create deployment.yaml \
          --from "${AKASH_KEY_NAME}" \
          --deposit "5000000uakt" \
          --yes \
          --keyring-backend file \
          --sign-mode direct
          echo "Deployment created!"

      # 11) 获取 Deployment Sequence
      - name: Get Deployment Sequence
        id: getdseq
        run: |
          ADDR=$(echo $AKASH_ADDRESS)
          DSEQ_JSON=$(akash query deployment list --owner "$ADDR" --state active -o json)
          DSEQ=$(echo "$DSEQ_JSON" | jq -r '.deployments[-1].deployment.deployment_id.dseq')
          echo "Found dseq: $DSEQ"
          echo "DSEQ=$DSEQ" >> $GITHUB_ENV

      # 12) 等待 Bid 并创建 Lease
      - name: Wait for Bid and Create Lease
        run: |
          DSEQ=$DSEQ
          echo "Waiting for a provider to bid on dseq=$DSEQ..."
          sleep 30
          PROVIDER=$(akash query market bid list --owner $AKASH_ADDRESS --dseq $DSEQ -o json | jq -r '.bids[0].bid.bid_id.provider')
          echo "Selected provider: $PROVIDER"
          echo "${{ secrets.AKASH_KEY_PASSPHRASE }}" | akash tx market lease create --owner $AKASH_ADDRESS --provider "$PROVIDER" --dseq $DSEQ --gseq 1 --oseq 1 --yes --keyring-backend file
          echo "Lease created!"
          echo "PROVIDER=$PROVIDER" >> $GITHUB_ENV

      # 13) 发送 Manifest
      - name: Send Manifest
        run: |
          DSEQ=$DSEQ
          PROVIDER=$PROVIDER
          echo "${{ secrets.AKASH_KEY_PASSPHRASE }}" | akash provider send-manifest deployment.yaml --provider "$PROVIDER" --dseq $DSEQ --keyring-backend file
          echo "Manifest sent!"
