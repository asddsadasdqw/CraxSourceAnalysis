name: Deploy to Akash Testnet

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码（若需要）
      - name: Check out code
        uses: actions/checkout@v3

      # 2. 安装依赖
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y expect yamllint

      # 3. 安装 Akash CLI (v1.0.0-rc10，可换其它版本)
      - name: Install Akash CLI
        run: |
          set -eux
          DOWNLOAD_URL="https://github.com/ovrclk/akash/releases/download/v1.0.0-rc10/akash_1.0.0-rc10_linux_amd64.zip"
          echo "Downloading Akash CLI from $DOWNLOAD_URL"

          curl -sSL "$DOWNLOAD_URL" -o akash.zip
          if [ ! -s akash.zip ]; then
              echo "下载失败或文件为空。"
              exit 1
          fi

          mkdir -p akash-cli
          unzip akash.zip -d akash-cli
          sudo mv akash-cli/akash /usr/local/bin/akash
          sudo chmod +x /usr/local/bin/akash

          echo "安装完成，版本信息："
          akash version

      # 4. 验证环境变量(Secrets)，并打印助记词单词数
      - name: Verify environment variables
        env:
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
          AKASH_MNEMONIC: ${{ secrets.AKASH_MNEMONIC }}
          BIP39_SECRET: ${{ secrets.BIP39_SECRET }}
        run: |
          set -eux
          if [ -z "$AKASH_KEY_NAME" ]; then
            echo "错误：AKASH_KEY_NAME 未设置"
            exit 1
          fi
          if [ -z "$KEYRING_PASSPHRASE" ]; then
            echo "错误：KEYRING_PASSPHRASE 未设置"
            exit 1
          fi
          if [ -z "$AKASH_MNEMONIC" ]; then
            echo "错误：AKASH_MNEMONIC 未设置"
            exit 1
          fi

          # 调试：打印助记词单词数，帮助排查 "invalid mnemonic"
          WORD_COUNT=$(echo "$AKASH_MNEMONIC" | wc -w)
          echo "Mnemonic word count is: $WORD_COUNT (应为24)"

          echo "BIP39_SECRET 可为空，如果没有则留空字符串"

      # 5. 使用助记词 (--recover) 来导入钱包
      - name: Import key from mnemonic
        env:
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
          AKASH_MNEMONIC: ${{ secrets.AKASH_MNEMONIC }}
          BIP39_SECRET: ${{ secrets.BIP39_SECRET }}
        run: |
          set -eux
          # akash keys add --recover 交互：两次口令 + 助记词 + (可选)BIP39

          if [ -z "$BIP39_SECRET" ]; then
            # 无 BIP39，第四行输入空行跳过
            (echo "$KEYRING_PASSPHRASE"; echo "$KEYRING_PASSPHRASE"; echo "$AKASH_MNEMONIC"; echo "") \
              | akash keys add "$AKASH_KEY_NAME" --recover --keyring-backend file
          else
            # 有 BIP39
            (echo "$KEYRING_PASSPHRASE"; echo "$KEYRING_PASSPHRASE"; echo "$AKASH_MNEMONIC"; echo "$BIP39_SECRET") \
              | akash keys add "$AKASH_KEY_NAME" --recover --keyring-backend file
          fi

          echo "Key 恢复完毕！"

      # 6. 使用 Expect 自动输入 passphrase 并展示地址
      - name: Execute Expect script
        env:
          AKASH_KEY_NAME: ${{ secrets.AKASH_KEY_NAME }}
          KEYRING_PASSPHRASE: ${{ secrets.KEYRING_PASSPHRASE }}
        run: |
          set -eux
          echo '#!/usr/bin/expect -f
          set timeout 20
          log_user 1

          if { [info exists ::env(AKASH_KEY_NAME)] == 0 || [info exists ::env(KEYRING_PASSPHRASE)] == 0 } {
              puts "错误：环境变量 AKASH_KEY_NAME 或 KEYRING_PASSPHRASE 未设置。"
              exit 1
          }

          spawn akash keys show "$::env(AKASH_KEY_NAME)" -a --keyring-backend file
          expect {
              -re {Enter keyring passphrase.*} {
                  send "$::env(KEYRING_PASSPHRASE)\r"
              }
              eof {
                  puts "错误：spawn 命令未成功执行。(可能找不到 akash？)"
                  exit 1
              }
              timeout {
                  puts "错误：spawn 命令超时。"
                  exit 1
              }
          }

          expect {
              -re {^(akash1[a-z0-9]+)$} {
                  set address $expect_out(1,string)
                  send_user "$address\n"
              }
              timeout {
                  puts "错误：未能捕获钱包地址。"
                  exit 1
              }
          }

          expect eof
          ' > get_address.exp

          chmod +x get_address.exp
          ADDR=$(./get_address.exp)

          if [ -z "$ADDR" ]; then
            echo "错误：无法获取钱包地址。"
            exit 1
          fi
          echo "您的钱包地址为: $ADDR"

      # (可选) 这里还可继续部署、查询余额等...
